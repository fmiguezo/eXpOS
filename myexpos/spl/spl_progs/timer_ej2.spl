breakpoint;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE+1]*16) + 13] = SP;
SP = [PROCESS_TABLE +([SYSTEM_STATUS_TABLE + 1]* 16) + 11] *512 -1; //Establezco el SP en número de pagina de area de usuario *512 -1
backup; //guardo el contexto
alias currentPID R0; // declaro una variable currentPID
currentPID = [SYSTEM_STATUS_TABLE + 1];

alias process_table_entry R1; //declaro una variable
process_table_entry = PROCESS_TABLE + (currentPID *16); // almaceno el PID en la entrada de la tabla de procesos correspondiente
[process_table_entry + 12] = SP %512; // guardo el valor de KPTR en la tabla de procesos
[process_table_entry + 14] = PTBR; //guardo el valor de PTBR en la tabla de procesos
[process_table_entry + 15] = PTLR; // guardo el valor de PTLR en la tabla de procesos
[process_table_entry + 4] = READY; // seteo el estado del proceso actual en “listo”

alias newPID R2;//creo una nueva variable
if(currentPID ==0) then
	newPID = 1;//intercambio la ejecucion con el otro proceso cargado
else
	newPID = 0;
endif;

alias new_process_table R3;
new_process_table = PROCESS_TABLE + newPID * 16;

//Volvemos a configurar los valores de SP de kernel, PTBR Y PTLR
SP = [new_process_table + 11] *512 + [new_process_table + 12];
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];
[SYSTEM_STATUS_TABLE + 1] = newPID;

//si el estado del proceso es “creado” entonces procedemos a pasarlo a estado “ejecutando”
if([new_process_table + 4 == CREATED]) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;
restore;

SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

breakpoint;
ireturn; 
